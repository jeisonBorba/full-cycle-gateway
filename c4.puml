@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!define ICONURL https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/v2.4.0
!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define CLOUDOGUURL https://raw.githubusercontent.com/cloudogu/plantuml-cloudogu-sprites/master

!includeurl ICONURL/devicons/go.puml
!includeurl ICONURL/devicons/nodejs.puml
!include DEVICONS/mysql.puml
!include DEVICONS/react.puml
!includeurl CLOUDOGUURL/tools/prometheus.puml
!includeurl CLOUDOGUURL/tools/grafana.puml
AddRelTag("async", $lineStyle = DashedLine())

SHOW_PERSON_PORTRAIT()

System_Ext(client, "Client", "System requesting payment")
Person(user, "Administrator", "Track payment transactions")
Person(superadmin, "Gateway Administrator", "Track payment transaction metrics")

System_Boundary(gateway, "Full Cycle Gateway"){
	Container(backend, "Backend", "Nest.js", "System receiving payment requests", $sprite = "nodejs")
	Container(processor, "Payments processor", "Go", "Process payment: authorizing or rejecting", $sprite = "go")
	ContainerDb(mysql_backend, "Database", "MySQL", "Store payment transactions", $sprite = "mysql")
	ContainerDb(mysql_processor, "Database", "MySQL", "Store payment transactions", $sprite = "mysql")
	Container(prometheus, "Payment metrics", "Prometheus", "Strore payment metrics", $sprite = "prometheus")
	Container(grafana, "Metrics dashboard", "Grafana", "Display payment metrics", $sprite = "grafana")
	Container(frontend,"Control panel", "Next.js", "Monitor payment transactions and their status", $sprite = "react")
	
	Rel(prometheus, processor, "Consume payment metrics on:", "HTTP/TXT")
	Rel(grafana, prometheus, "Consume payment metrics on:", "PromQL")
	Rel(superadmin, grafana, "Consume payment metrics on:", "HTTPS")
	Rel(user, frontend, "Request transactions data on:", "HTTPS")
	Rel(frontend, backend, "Retrieve payment information from:","HTTPS/JSON")
	Rel(processor, mysql_processor, "Receive payment data from:", "MySQL Protocol")
	Rel(backend, mysql_backend, "Receive payment data from:", "MySQL Protocol")
	Rel(client, backend, "Request payment on:", "HTTP/JSON")
	Rel(backend, processor, "Send payment data to:", "Through Kafka: transactions topic",$tags = "async")
	Rel(processor, backend, "Send transactions result to:", "Through Kafka: transactions_result topic", $tags = "async")
}
@enduml